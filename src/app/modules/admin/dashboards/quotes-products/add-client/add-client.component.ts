import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ClientsService } from './../../../catalogs/clients/clients.service';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { MatSnackBar } from '@angular/material/snack-bar';
import Swal from 'sweetalert2';
import { StarRatingModule, StarRatingConfigService } from 'angular-star-rating';
import {StarRatingBridgeModule} from './../../../catalogs/clients/details/start-rating-bridge.module';
import { MatDialogRef } from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Inject } from '@angular/core';


@Component({
  selector: 'app-add-client',
  templateUrl: './add-client.component.html',
  styleUrls:["./add-client.component.scss"],
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatButtonModule,
    MatDatepickerModule,
    MatNativeDateModule,
    StarRatingBridgeModule
  ],
  })
export class AddClientComponent implements OnInit {
  clienteForm: FormGroup;
  categorias: any[] = [];
  unidadesDeNegocio: any[] = [];
  clientId: number | null = null;
  asentamientos: string[] = [];  // Lista de colonias disponibles
  estadosMexico: string[] = [
    "Aguascalientes", "Baja California", "Baja California Sur", "Campeche", "Chiapas",
    "Chihuahua", "Coahuila", "Colima", "Durango", "Guanajuato", "Guerrero", "Hidalgo",
    "Jalisco", "M√©xico", "Michoac√°n", "Morelos", "Nayarit", "Nuevo Le√≥n", "Oaxaca",
    "Puebla", "Quer√©taro", "Quintana Roo", "San Luis Potos√≠", "Sinaloa", "Sonora",
    "Tabasco", "Tamaulipas", "Tlaxcala", "Veracruz", "Yucat√°n", "Zacatecas"
  ];

  constructor(
    private fb: FormBuilder,
    private clientsService: ClientsService,
    private http: HttpClient,
    private snackBar: MatSnackBar,
    public dialogRef: MatDialogRef<AddClientComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any // üëà aqu√≠ se inyecta el dato
  ) {}

  ngOnInit(): void {
    this.clienteForm = this.fb.group({
        clienteId: [0],
        nombre: ['', Validators.required],
        direccion: [''],
        ciudad: [''],
        colonia: [''],
        estado: [''],
        pais: ['M√©xico', Validators.required],
        codigoPostal: ['', [Validators.required, Validators.pattern(/^\d{5}$/)]],
        telefono: ['', Validators.required],
        email: ['', [Validators.required, Validators.email]],
        empresa: [''],
        rfc: [''],
        activo: [true],
        Calificacion:[3]
    });

    // Si viene un ID en data, cargar datos del cliente
  if (this.data?.clienteId) {
    this.clientsService.getClientById(this.data.clienteId).subscribe(cliente => {
      this.clienteForm.patchValue(cliente);
      this.clientId = cliente.clienteId;
      this.clienteForm.get("Calificacion").setValue(cliente.calificacion || 3); // Valor por defecto
    });
  }
  }

  getCategorias(): void {
    this.clientsService.getClient().subscribe(data => this.categorias = data);
  }

  saveClient(): void {
  if (this.clienteForm.invalid) {
    Swal.fire({
      icon: "error",
      title: "Oops",
      text: "Por favor, completa los campos obligatorios",
      confirmButtonText: "Aceptar"
    });
    return;
  }

  const clientData = this.clienteForm.value;

  this.clientsService.createClient(clientData).subscribe({
    next: (nuevoCliente) => {
      Swal.fire({
        icon: 'success',
        title: 'Cliente guardado',
        text: 'El cliente se ha guardado correctamente.',
        confirmButtonText: 'Aceptar'
      }).then(() => {
        this.dialogRef.close(nuevoCliente); // üëà Devuelve el cliente creado al padre
      });
    },
    error: (error) => {
      console.error('Error al guardar el cliente:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudo guardar el cliente. Int√©ntalo de nuevo m√°s tarde.',
        confirmButtonText: 'Aceptar'
      });
    }
  });
}

  /**
   * Obtiene direcci√≥n autom√°ticamente por C√≥digo Postal
   */
  buscarDireccionPorCP(): void {
    const cp = this.clienteForm.get('codigoPostal')?.value;
    if (!cp || cp.length !== 5) return;

    const token = '5f76a85b-d1a1-47ce-8e81-3de0df42e11c';  // Reemplaza con tu token de COPOMEX
    const url = `https://api.copomex.com/query/info_cp/${cp}?token=${token}`;

    this.http.get<any[]>(url).subscribe(
      (data) => {
        if (data.length > 0) {
          
          const primerResultado = data[0].response; // Toma el primer resultado como referencia
          const estado = primerResultado.estado;
          const ciudad = primerResultado.ciudad;
          const asentamientos = data.map(item => item.response.asentamiento); // Lista de colonias

          if (this.estadosMexico.includes(estado)) {
            this.clienteForm.patchValue({
              ciudad,
              estado,
              pais: 'M√©xico'
            });

            // Agregar los asentamientos a un campo de selecci√≥n en el formulario
            this.asentamientos = asentamientos; // Debes definir esta variable en la clase como: asentamientos: string[] = [];
          } else {
            this.snackBar.open('El estado recibido no es v√°lido para M√©xico', 'Cerrar', { duration: 3000 });
          }
        } else {
          this.snackBar.open('No se encontraron datos para este c√≥digo postal', 'Cerrar', { duration: 3000 });
        }
      },
      () => {
        this.snackBar.open('Error al obtener datos del c√≥digo postal', 'Cerrar', { duration: 3000 });
      }
    );
}
}