{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/material-luxon-adapter/fesm2022/material-luxon-adapter.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { DateTime, Info } from 'luxon';\n\n/** InjectionToken for LuxonDateAdapter to configure options. */\nconst MAT_LUXON_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_LUXON_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false,\n    firstDayOfWeek: 0,\n    defaultOutputCalendar: 'gregory'\n  };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts Luxon Dates for use with Angular Material. */\nclass LuxonDateAdapter extends DateAdapter {\n  constructor(dateLocale, options) {\n    super();\n    this._useUTC = !!options?.useUtc;\n    this._firstDayOfWeek = options?.firstDayOfWeek || 0;\n    this._defaultOutputCalendar = options?.defaultOutputCalendar || 'gregory';\n    this.setLocale(dateLocale || DateTime.local().locale);\n  }\n  getYear(date) {\n    return date.year;\n  }\n  getMonth(date) {\n    // Luxon works with 1-indexed months whereas our code expects 0-indexed.\n    return date.month - 1;\n  }\n  getDate(date) {\n    return date.day;\n  }\n  getDayOfWeek(date) {\n    return date.weekday;\n  }\n  getMonthNames(style) {\n    // Adding outputCalendar option, because LuxonInfo doesn't get effected by LuxonSettings\n    return Info.months(style, {\n      locale: this.locale,\n      outputCalendar: this._defaultOutputCalendar\n    });\n  }\n  getDateNames() {\n    // At the time of writing, Luxon doesn't offer similar\n    // functionality so we have to fall back to the Intl API.\n    const dtf = new Intl.DateTimeFormat(this.locale, {\n      day: 'numeric',\n      timeZone: 'utc'\n    });\n    // Format a UTC date in order to avoid DST issues.\n    return range(31, i => dtf.format(DateTime.utc(2017, 1, i + 1).toJSDate()));\n  }\n  getDayOfWeekNames(style) {\n    // Note that we shift the array once, because Luxon returns Monday as the\n    // first day of the week, whereas our logic assumes that it's Sunday. See:\n    // https://moment.github.io/luxon/api-docs/index.html#infoweekdays\n    const days = Info.weekdays(style, {\n      locale: this.locale\n    });\n    days.unshift(days.pop());\n    return days;\n  }\n  getYearName(date) {\n    return date.toFormat('yyyy', this._getOptions());\n  }\n  getFirstDayOfWeek() {\n    return this._firstDayOfWeek;\n  }\n  getNumDaysInMonth(date) {\n    return date.daysInMonth;\n  }\n  clone(date) {\n    return DateTime.fromObject(date.toObject(), this._getOptions());\n  }\n  createDate(year, month, date) {\n    const options = this._getOptions();\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n    // Luxon uses 1-indexed months so we need to add one to the month.\n    const result = this._useUTC ? DateTime.utc(year, month + 1, date, options) : DateTime.local(year, month + 1, date, options);\n    if (!this.isValid(result)) {\n      throw Error(`Invalid date \"${date}\". Reason: \"${result.invalidReason}\".`);\n    }\n    return result;\n  }\n  today() {\n    const options = this._getOptions();\n    return this._useUTC ? DateTime.utc(options) : DateTime.local(options);\n  }\n  parse(value, parseFormat) {\n    const options = this._getOptions();\n    if (typeof value == 'string' && value.length > 0) {\n      const iso8601Date = DateTime.fromISO(value, options);\n      if (this.isValid(iso8601Date)) {\n        return iso8601Date;\n      }\n      const formats = Array.isArray(parseFormat) ? parseFormat : [parseFormat];\n      if (!parseFormat.length) {\n        throw Error('Formats array must not be empty.');\n      }\n      for (const format of formats) {\n        const fromFormat = DateTime.fromFormat(value, format, options);\n        if (this.isValid(fromFormat)) {\n          return fromFormat;\n        }\n      }\n      return this.invalid();\n    } else if (typeof value === 'number') {\n      return DateTime.fromMillis(value, options);\n    } else if (value instanceof Date) {\n      return DateTime.fromJSDate(value, options);\n    } else if (value instanceof DateTime) {\n      return DateTime.fromMillis(value.toMillis(), options);\n    }\n    return null;\n  }\n  format(date, displayFormat) {\n    if (!this.isValid(date)) {\n      throw Error('LuxonDateAdapter: Cannot format invalid date.');\n    }\n    if (this._useUTC) {\n      return date.setLocale(this.locale).setZone('utc').toFormat(displayFormat);\n    } else {\n      return date.setLocale(this.locale).toFormat(displayFormat);\n    }\n  }\n  addCalendarYears(date, years) {\n    return date.reconfigure(this._getOptions()).plus({\n      years\n    });\n  }\n  addCalendarMonths(date, months) {\n    return date.reconfigure(this._getOptions()).plus({\n      months\n    });\n  }\n  addCalendarDays(date, days) {\n    return date.reconfigure(this._getOptions()).plus({\n      days\n    });\n  }\n  toIso8601(date) {\n    return date.toISO();\n  }\n  /**\n   * Returns the given value if given a valid Luxon or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid DateTime and empty\n   * string into null. Returns an invalid date for all other values.\n   */\n  deserialize(value) {\n    const options = this._getOptions();\n    let date;\n    if (value instanceof Date) {\n      date = DateTime.fromJSDate(value, options);\n    }\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      date = DateTime.fromISO(value, options);\n    }\n    if (date && this.isValid(date)) {\n      return date;\n    }\n    return super.deserialize(value);\n  }\n  isDateInstance(obj) {\n    return obj instanceof DateTime;\n  }\n  isValid(date) {\n    return date.isValid;\n  }\n  invalid() {\n    return DateTime.invalid('Invalid Luxon DateTime object.');\n  }\n  /** Gets the options that should be used when constructing a new `DateTime` object. */\n  _getOptions() {\n    return {\n      zone: this._useUTC ? 'utc' : undefined,\n      locale: this.locale,\n      outputCalendar: this._defaultOutputCalendar\n    };\n  }\n  static {\n    this.ɵfac = function LuxonDateAdapter_Factory(t) {\n      return new (t || LuxonDateAdapter)(i0.ɵɵinject(MAT_DATE_LOCALE, 8), i0.ɵɵinject(MAT_LUXON_DATE_ADAPTER_OPTIONS, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: LuxonDateAdapter,\n      factory: LuxonDateAdapter.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LuxonDateAdapter, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_LOCALE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_LUXON_DATE_ADAPTER_OPTIONS]\n    }]\n  }], null);\n})();\nconst MAT_LUXON_DATE_FORMATS = {\n  parse: {\n    dateInput: 'D'\n  },\n  display: {\n    dateInput: 'D',\n    monthYearLabel: 'LLL yyyy',\n    dateA11yLabel: 'DD',\n    monthYearA11yLabel: 'LLLL yyyy'\n  }\n};\nclass LuxonDateModule {\n  static {\n    this.ɵfac = function LuxonDateModule_Factory(t) {\n      return new (t || LuxonDateModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: LuxonDateModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: DateAdapter,\n        useClass: LuxonDateAdapter,\n        deps: [MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS]\n      }]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LuxonDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: DateAdapter,\n        useClass: LuxonDateAdapter,\n        deps: [MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS]\n      }]\n    }]\n  }], null, null);\n})();\nclass MatLuxonDateModule {\n  static {\n    this.ɵfac = function MatLuxonDateModule_Factory(t) {\n      return new (t || MatLuxonDateModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatLuxonDateModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [provideLuxonDateAdapter()]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLuxonDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [provideLuxonDateAdapter()]\n    }]\n  }], null, null);\n})();\nfunction provideLuxonDateAdapter(formats = MAT_LUXON_DATE_FORMATS) {\n  return [{\n    provide: DateAdapter,\n    useClass: LuxonDateAdapter,\n    deps: [MAT_DATE_LOCALE, MAT_LUXON_DATE_ADAPTER_OPTIONS]\n  }, {\n    provide: MAT_DATE_FORMATS,\n    useValue: formats\n  }];\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LuxonDateAdapter, LuxonDateModule, MAT_LUXON_DATE_ADAPTER_OPTIONS, MAT_LUXON_DATE_ADAPTER_OPTIONS_FACTORY, MAT_LUXON_DATE_FORMATS, MatLuxonDateModule, provideLuxonDateAdapter };\n"],
  "mappings": "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",
  "names": []
}
